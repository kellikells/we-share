create a functional component: <rafc>

npm run start  **

useState : ./component/AddItem.js

    -component level state
        AND
    -controlled components within the form


context:  ./context/GlobalState.js

    *from the top, it is imported in App.js, by <use context hook>

    -(only one context bc small application)
        -- inside GlobalState.js we put the initial state so it is accessible anywhere
            --- this case: items
                ---- so we can add/delete/edit items

                    items:
                        -id
                        -name (itemName)
                        -quantity 
                            -- positive = weHave
                            -- negative = weNeed


reducer:  ./context/AppReducer.js:
    -specify the application state changes, in response to certain actions to our context
    -a way to change state and send it down to components




        {/*---------- grid ----------*/ }
        {/* grid-template-columns: 10px auto 25px; */ }
    {/* gap: 15px 10px (row, column) */ }
    {/* <div className="grid">
        </div> */}